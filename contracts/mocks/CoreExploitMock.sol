// SPDX-License-Identifier: LGPL-3.0
pragma solidity ^0.8.9;

import "../core/facets/AMMFacet.sol";
import "../core/facets/ListingFacet.sol";

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract CoreExploitMock {
    AMMFacet public immutable ammFacet;
    IERC20 public immutable erc20;

    constructor (address _ammFacet, address _erc20) {
        ammFacet = AMMFacet(_ammFacet);
        erc20 = IERC20(_erc20);
    }

    function buy(uint256 _metaNftId, uint128 _roundOut) public {
        uint128 baseIn = ammFacet.quoteBuyExactRounds(_metaNftId, _roundOut);
        erc20.approve(address(ammFacet), baseIn);
        ammFacet.buyExactRoundsWithBases(_metaNftId, baseIn, _roundOut, 999_999_999_999_999);
    }

    function buyTwice(uint256 _metaNftId, uint128 _roundOut) public {
        buy(_metaNftId, _roundOut);
        buy(_metaNftId, _roundOut);
    }
}

contract CoreExploitMock2 is CoreExploitMock{
    CoreExploitMock public immutable coreExploitMock;

    constructor (address _ammFacet, address _erc20, address _coreExploitMock) CoreExploitMock(_ammFacet, _erc20) {
        coreExploitMock = CoreExploitMock(_coreExploitMock);
    }

    function buyViaContract(uint256 _metaNftId, uint128 _roundOut) public {
        buy(_metaNftId, _roundOut);
        coreExploitMock.buy(_metaNftId, _roundOut);
    }
}
